# FL Hub - Настройка сервера и базы данных

## Выполненные задачи

1. Создана структура папок для бэкенда:
   - backend/config/ - для конфигурационных файлов
   - backend/routes/ - для маршрутов API
   - backend/models/ - для моделей данных

2. Настроен Express-сервер:
   - Создан базовый сервер с поддержкой CORS
   - Добавлены тестовые маршруты
   - Настроена обработка ошибок

3. Настроена база данных PostgreSQL:
   - Создана база данных "flhub_bd"
   - Созданы основные таблицы (пользователи, категории, ресурсы и т.д.)
   - Добавлены начальные данные (категории, администратор)

4. Добавлены скрипты для управления базой данных:
   - create-db.js - для создания базы данных
   - init-db.js - для инициализации таблиц и данных
   - Обновлены скрипты в package.json

5. Проверена работоспособность:
   - Сервер успешно запускается
   - API-маршруты работают корректно
   - Подключение к базе данных функционирует

## Структура базы данных

1. Таблица пользователей (users):
   - id - уникальный идентификатор
   - username - имя пользователя
   - email - электронная почта
   - password_hash - хеш пароля
   - is_admin - флаг администратора
   - is_vip - флаг VIP-пользователя
   - vip_until - дата окончания VIP-подписки
   - created_at - дата создания
   - updated_at - дата обновления

2. Таблица категорий (categories):
   - id - уникальный идентификатор
   - name - название категории
   - slug - URL-совместимое название
   - description - описание
   - icon - иконка
   - created_at - дата создания

3. Таблица ресурсов (resources):
   - id - уникальный идентификатор
   - title - название ресурса
   - description - описание
   - category_id - идентификатор категории
   - file_path - путь к файлу
   - thumbnail_path - путь к миниатюре
   - is_premium - флаг премиум-контента
   - download_count - количество скачиваний
   - created_by - идентификатор создателя
   - created_at - дата создания
   - updated_at - дата обновления

4. Таблица тегов (tags):
   - id - уникальный идентификатор
   - name - название тега
   - created_at - дата создания

5. Связующая таблица ресурсов и тегов (resource_tags):
   - resource_id - идентификатор ресурса
   - tag_id - идентификатор тега

6. Таблица комментариев (comments):
   - id - уникальный идентификатор
   - resource_id - идентификатор ресурса
   - user_id - идентификатор пользователя
   - content - содержание комментария
   - created_at - дата создания
   - updated_at - дата обновления

7. Таблица подписок (subscriptions):
   - id - уникальный идентификатор
   - user_id - идентификатор пользователя
   - plan_type - тип плана
   - start_date - дата начала
   - end_date - дата окончания
   - payment_id - идентификатор платежа
   - amount - сумма
   - status - статус
   - created_at - дата создания

8. Таблица скачиваний (downloads):
   - id - уникальный идентификатор
   - user_id - идентификатор пользователя
   - resource_id - идентификатор ресурса
   - downloaded_at - дата скачивания
   - ip_address - IP-адрес

## API-маршруты

1. GET /ping - проверка работоспособности сервера
   - Ответ: { "status": "ok", "message": "pong" }

2. GET /api - базовый маршрут API
   - Ответ: { "message": "Welcome to FL Hub API" }

3. GET /api/status - статус API
   - Ответ: { "status": "ok", "message": "FL Hub API is running" }

4. GET /api/info - информация о сервере
   - Ответ: { "name": "FL Hub API", "version": "1.0.0", "environment": "development" }

5. GET /api/db-test - проверка подключения к базе данных
   - Ответ: { "status": "ok", "message": "Database connection successful", "time": "..." }

## Скрипты

1. npm start - запуск сервера
2. npm run dev - запуск сервера в режиме разработки с автоматической перезагрузкой
3. npm run create-db - создание базы данных
4. npm run init-db - инициализация таблиц и данных
5. npm run setup-db - создание базы данных и инициализация таблиц и данных

## Следующие шаги

1. Разработка API для работы с ресурсами:
   - Создание маршрутов для CRUD-операций с ресурсами
   - Реализация загрузки и скачивания файлов

2. Аутентификация и авторизация:
   - Реализация регистрации и входа пользователей
   - Защита маршрутов с помощью JWT или сессий

3. Интеграция фронтенда с бэкендом:
   - Настройка запросов к API из React-приложения
   - Отображение данных из базы данных на фронтенде

4. Реализация VIP-подписки:
   - Создание системы оплаты
   - Ограничение доступа к премиум-контенту
