# Настройка модели пользователей и ролей в FL Hub

## Структура базы данных

### Таблица ролей (roles)
- id (SERIAL, PRIMARY KEY) - уникальный идентификатор роли
- name (VARCHAR(50), UNIQUE) - название роли

Предопределенные роли:
1. BASIC - базовый пользователь
2. VIP - VIP-пользователь
3. ADMIN - администратор
4. CEO - главный администратор

### Таблица пользователей (tg_users)
- id (SERIAL, PRIMARY KEY) - уникальный идентификатор пользователя
- telegram_id (BIGINT, UNIQUE) - идентификатор пользователя в Telegram
- telegram_username (VARCHAR(100)) - имя пользователя в Telegram (опционально)
- first_name (VARCHAR(100)) - имя пользователя
- last_name (VARCHAR(100)) - фамилия пользователя (опционально)
- role_id (INT, REFERENCES roles(id)) - роль пользователя
- created_at (TIMESTAMP, DEFAULT NOW()) - дата регистрации

## Модели

### Role.js
Модель для работы с ролями пользователей. Основные методы:
- getAll() - получить все роли
- getById(id) - получить роль по ID
- getByName(name) - получить роль по имени
- getBasicRoleId() - получить ID роли BASIC

### User.js
Модель для работы с пользователями. Основные методы:
- getAll() - получить всех пользователей
- getById(id) - получить пользователя по ID
- getByTelegramId(telegramId) - получить пользователя по Telegram ID
- create(userData) - создать нового пользователя
- update(userData) - обновить пользователя
- delete() - удалить пользователя
- getRole() - получить роль пользователя
- hasRole(roleName) - проверить, имеет ли пользователь определенную роль
- isAdmin() - проверить, является ли пользователь администратором
- isVIP() - проверить, является ли пользователь VIP

## Сервисы

### UserService.js
Сервис для работы с пользователями. Основные методы:
- findOrCreateUserByTelegram(telegramData) - найти или создать пользователя по данным из Telegram
- getAllUsersWithRoles() - получить всех пользователей с информацией о ролях
- changeUserRole(userId, roleName) - изменить роль пользователя

## API-маршруты

### /api/users
- GET / - получить всех пользователей
- GET /:id - получить пользователя по ID
- POST / - создать пользователя (для тестирования)
- PATCH /:id/role - обновить роль пользователя

### /api/users/roles
- GET /all - получить все роли

## Настройка базы данных

1. Создайте таблицы в PostgreSQL, выполнив SQL-скрипт из файла manual-setup.sql:
   ```
   psql -U postgres -d flhub_bd -f manual-setup.sql
   ```
   или выполните скрипт через PgAdmin или другой SQL-клиент.

2. Проверьте, что таблицы созданы и заполнены:
   ```sql
   SELECT * FROM roles;
   SELECT * FROM tg_users;
   ```

## Тестирование

Для тестирования моделей и сервисов выполните:
```
npm run test-users
```

Этот скрипт проверит:
1. Получение ролей
2. Создание пользователей
3. Получение пользователей
4. Обновление ролей пользователей
5. Проверку прав пользователей
6. Удаление пользователей

## Использование в приложении

Для авторизации пользователя через Telegram:
1. Получите данные пользователя из Telegram (id, username, first_name, last_name)
2. Вызовите метод UserService.findOrCreateUserByTelegram(telegramData)
3. Сохраните полученного пользователя в сессии или создайте JWT-токен

Для проверки прав пользователя:
1. Получите пользователя из базы данных
2. Используйте методы isAdmin() или isVIP() для проверки прав
3. Или используйте метод hasRole(roleName) для проверки конкретной роли
