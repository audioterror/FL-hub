const axios = require('axios');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const botToken = process.env.TELEGRAM_BOT_TOKEN;

// –ö–µ—à –¥–ª—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ö–ª—é—á: telegram_id, –∑–Ω–∞—á–µ–Ω–∏–µ: { url: string, timestamp: number }
const photoUrlCache = new Map();

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
const getUserInfo = async (telegramId) => {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${botToken}/getChat`, {
      params: {
        chat_id: telegramId
      }
    });

    if (response.data && response.data.ok) {
      return response.data.result;
    }

    return null;
  } catch (error) {
    console.error('Error getting user info from Telegram:', error.message);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {boolean} forceRefresh - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
 * @returns {Promise<string|null>} - URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
const getUserProfilePhoto = async (telegramId, forceRefresh = false) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  const cachedPhoto = photoUrlCache.get(telegramId);
  const now = Date.now();

  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–µ—à–µ –∏ –∫–µ—à –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (24 —á–∞—Å–∞) –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (cachedPhoto && !forceRefresh && (now - cachedPhoto.timestamp < 24 * 60 * 60 * 1000)) {
    return cachedPhoto.url;
  }

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.get(`https://api.telegram.org/bot${botToken}/getUserProfilePhotos`, {
      params: {
        user_id: telegramId,
        limit: 1
      }
    });

    if (response.data && response.data.ok && response.data.result.photos.length > 0) {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const photo = response.data.result.photos[0][0]; // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileResponse = await axios.get(`https://api.telegram.org/bot${botToken}/getFile`, {
        params: {
          file_id: photo.file_id
        }
      });

      if (fileResponse.data && fileResponse.data.ok) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        const filePath = fileResponse.data.result.file_path;
        const photoUrl = `https://api.telegram.org/file/bot${botToken}/${filePath}`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        photoUrlCache.set(telegramId, {
          url: photoUrl,
          timestamp: now
        });

        return photoUrl;
      }
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º null –≤ –∫–µ—à
    photoUrlCache.set(telegramId, {
      url: null,
      timestamp: now
    });

    return null;
  } catch (error) {
    console.error('Error getting user profile photo from Telegram:', error.message);
    return null;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} roleName - –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
 * @returns {Promise<boolean>} - true, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
 */
const sendRoleChangeNotification = async (telegramId, roleName) => {
  try {
    // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–µ–π
    const roleEmoji = {
      'BASIC': 'üë§',
      'VIP': '‚≠ê',
      'ADMIN': 'üõ°Ô∏è',
      'CEO': 'üëë'
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const emoji = roleEmoji[roleName] || 'üîî';
    const message = `${emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>\n\n–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>${roleName}</b>.\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤ FL Hub.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      chat_id: telegramId,
      text: message,
      parse_mode: 'HTML'
    });

    return response.data && response.data.ok;
  } catch (error) {
    console.error('Error sending role change notification:', error.message);
    return false;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
 * @param {number} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} subscriptionInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
 * @returns {Promise<boolean>} - true, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
 */
const sendSubscriptionNotification = async (telegramId, subscriptionInfo) => {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = `‚≠ê <b>VIP-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n–í–∞—à–∞ VIP-–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>${subscriptionInfo.plan}</b> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ <b>${subscriptionInfo.expiryDate}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FL Hub.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      chat_id: telegramId,
      text: message,
      parse_mode: 'HTML'
    });

    return response.data && response.data.ok;
  } catch (error) {
    console.error('Error sending subscription notification:', error.message);
    return false;
  }
};

module.exports = {
  getUserInfo,
  getUserProfilePhoto,
  sendRoleChangeNotification,
  sendSubscriptionNotification
};
