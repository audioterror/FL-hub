import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import { API_URL } from '../api/config';
import './ProfileEditor.css';

const ProfileEditor = ({ user, onClose, onSave, onLogout }) => {
  const [displayName, setDisplayName] = useState(user.first_name || '');
  const [status, setStatus] = useState(user.status || '');
  const [telegramUsername, setTelegramUsername] = useState(user.telegram_username || '');
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState(user.photo_url || null);

  const fileInputRef = useRef(null);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
  useEffect(() => {
    if (successMessage) {
      const timer = setTimeout(() => {
        setSuccessMessage(null);
      }, 3000);

      return () => clearTimeout(timer);
    }
  }, [successMessage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  const handlePhotoUpload = () => {
    fileInputRef.current.click();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!file.type.startsWith('image/')) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 5 –ú–ë)
    if (file.size > 5 * 1024 * 1024) {
      setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë');
      return;
    }

    setAvatarFile(file);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
    const reader = new FileReader();
    reader.onload = (e) => {
      setAvatarPreview(e.target.result);
    };
    reader.readAsDataURL(file);

    setError(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async () => {
    try {
      setSaving(true);
      setError(null);

      console.log('Saving profile with values:', {
        displayName,
        status,
        telegramUsername,
        hasAvatarFile: !!avatarFile
      });

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = {
        ...user,
        first_name: displayName,
        status,
        telegram_username: telegramUsername
      };

      console.log('Initial updatedUser:', updatedUser);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
      if (avatarFile) {
        try {
          const formData = new FormData();
          formData.append('avatar', avatarFile);
          formData.append('telegram_id', user.telegram_id);

          console.log('Uploading avatar file:', avatarFile.name, 'size:', avatarFile.size, 'type:', avatarFile.type);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData
          for (let pair of formData.entries()) {
            console.log(pair[0] + ': ' + (pair[0] === 'avatar' ? 'File object' : pair[1]));
          }

          const uploadResponse = await axios.post(`${API_URL}/users/upload-avatar`, formData, {
            headers: {
              'Content-Type': 'multipart/form-data'
            }
          });

          console.log('Upload response:', uploadResponse.data);

          if (uploadResponse.data && uploadResponse.data.photo_url) {
            updatedUser.photo_url = uploadResponse.data.photo_url;
            console.log('Updated photo_url:', updatedUser.photo_url);
          }
        } catch (uploadError) {
          console.error('Error uploading avatar:', uploadError);

          // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
          if (uploadError.response) {
            console.error('Error response:', uploadError.response.data);
            console.error('Error status:', uploadError.response.status);
            console.error('Error headers:', uploadError.response.headers);
          } else if (uploadError.request) {
            console.error('Error request:', uploadError.request);
          }

          // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
          if (uploadError.response && uploadError.response.data && uploadError.response.data.error) {
            errorMessage = uploadError.response.data.error;
          } else if (uploadError.message) {
            errorMessage = uploadError.message;
          }

          setError(errorMessage);
          setSaving(false);
          return;
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const updateData = {
        first_name: displayName,
        telegram_username: telegramUsername,
        status,
        photo_url: updatedUser.photo_url // –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
      };

      console.log('Sending update data to server:', updateData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      const response = await axios.patch(
        `${API_URL}/auth/user/${user.telegram_id}`,
        updateData
      );

      console.log('Server response:', response.data);

      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é onSave
      if (response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
        const savedUser = localStorage.getItem('user');
        if (savedUser) {
          const userData = JSON.parse(savedUser);
          console.log('Current user data in localStorage:', userData);

          const finalUpdatedUser = {
            ...userData,
            ...response.data,
            photo_url: updatedUser.photo_url || response.data.photo_url,
            token: userData.token // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          };

          console.log('Final updated user data:', finalUpdatedUser);

          // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
          localStorage.setItem('user', JSON.stringify(finalUpdatedUser));

          // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é onSave —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          onSave(finalUpdatedUser);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          const finalUpdatedUser = {
            ...updatedUser,
            ...response.data,
            photo_url: updatedUser.photo_url || response.data.photo_url
          };
          console.log('Final updated user data (no localStorage):', finalUpdatedUser);
          onSave(finalUpdatedUser);
        }

        setSuccessMessage('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
          onClose();
        }, 1000);
      }
    } catch (error) {
      console.error('Error saving profile:', error);

      // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      if (error.response && error.response.data && error.response.data.error) {
        errorMessage = error.response.data.error;
      } else if (error.message) {
        errorMessage = error.message;
      }

      setError(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="profile-editor-overlay">
      <div className="profile-editor">
        <div className="profile-editor-header">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h2>
          <button className="profile-editor-close" onClick={onClose}>√ó</button>
        </div>

        <div className="profile-editor-content">
          {error && (
            <div className="profile-editor-error">
              {error}
            </div>
          )}

          {successMessage && (
            <div className="profile-editor-success">
              {successMessage}
            </div>
          )}

          <div className="profile-editor-avatar-section">
            <div className="profile-editor-avatar" onClick={handlePhotoUpload}>
              {avatarPreview ? (
                <img
                  src={avatarPreview}
                  alt={user.first_name}
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextElementSibling.style.display = 'flex';
                  }}
                />
              ) : null}
              <div className="profile-editor-avatar-placeholder" style={{ display: avatarPreview ? 'none' : 'flex' }}>
                {user.first_name ? user.first_name.charAt(0).toUpperCase() : 'U'}
              </div>
            </div>
            <button className="profile-editor-upload-btn" onClick={handlePhotoUpload}>
              <span className="upload-icon">üì∑</span> –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
            </button>

            {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
            <input
              type="file"
              ref={fileInputRef}
              style={{ display: 'none' }}
              accept="image/*"
              onChange={handleFileChange}
            />
          </div>

          <div className="profile-editor-form">
            <div className="profile-editor-field">
              <label>–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è</label>
              <input
                type="text"
                value={displayName}
                onChange={(e) => setDisplayName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
              />
            </div>

            <div className="profile-editor-field">
              <label>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤)</label>
              <input
                type="text"
                value={status}
                onChange={(e) => setStatus(e.target.value)}
                maxLength={40}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å"
              />
            </div>



            <div className="profile-editor-field">
              <label>–¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏</label>
              <input
                type="text"
                value={telegramUsername}
                onChange={(e) => setTelegramUsername(e.target.value)}
                placeholder="username"
              />
            </div>
          </div>

          <div className="profile-editor-divider"></div>

          <div className="profile-editor-account-status">
            <h3>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
            <div className="profile-editor-role">
              <span className={`role-badge ${user.role.toLowerCase()}`}>{user.role}</span>
            </div>
          </div>

          <div className="profile-editor-actions">
            <button
              className="profile-editor-logout"
              onClick={onLogout}
              disabled={saving}
            >
              –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            </button>
            <div className="profile-editor-buttons">
              <button
                className="profile-editor-cancel"
                onClick={onClose}
                disabled={saving}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className="profile-editor-save"
                onClick={handleSave}
                disabled={saving}
              >
                {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileEditor;
